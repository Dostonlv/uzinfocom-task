name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: ${{ secrets.DATABASE_USER }}
          POSTGRES_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          POSTGRES_DB: ${{ secrets.DATABASE_NAME }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 55432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 56379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run linter
        run: pnpm run lint

      - name: Check formatting
        run: pnpm run format -- --check

      - name: Run tests
        run: pnpm run test
        env:
          DATABASE_USER: ${{ secrets.DATABASE_USER }}
          DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
          DATABASE_HOST: localhost
          DATABASE_PORT: 55432
          REDIS_HOST: localhost
          REDIS_PORT: 56379
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JWT_EXPIRES_IN: ${{ secrets.JWT_EXPIRES_IN }}

      - name: Generate coverage report
        run: pnpm run test:cov
        env:
          DATABASE_USER: ${{ secrets.DATABASE_USER }}
          DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
          DATABASE_HOST: localhost
          DATABASE_PORT: 55432
          REDIS_HOST: localhost
          REDIS_PORT: 56379
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JWT_EXPIRES_IN: ${{ secrets.JWT_EXPIRES_IN }}

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: lint-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  docker:
    name: Docker Image
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ secrets.DOCKER_USERNAME }}/uzinfocom-task
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    needs: docker
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to server via SSH
        uses: appleboy/ssh-action@v1.0.3
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          envs: DOCKER_USERNAME,DOCKER_PASSWORD
          script: |
            set -e

            echo "üöÄ Starting deployment..."

            cd ~/uzinfocom-task || { echo "‚ùå Directory not found"; exit 1; }

            # Pull latest code
            echo "üì• Pulling latest code..."
            git pull origin main

            # Login to Docker Hub
            echo "üîê Logging in to Docker Hub..."
            echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin

            # Pull latest image
            echo "üì¶ Pulling latest Docker image..."
            docker pull $DOCKER_USERNAME/uzinfocom-task:latest

            # Stop existing containers
            echo "üõë Stopping existing containers..."
            docker-compose -f docker-compose.prod.yml down || true

            # Remove old containers
            echo "üóëÔ∏è  Removing old containers..."
            docker-compose -f docker-compose.prod.yml rm -f || true

            # Start new containers
            echo "üöÄ Starting new containers..."
            docker-compose -f docker-compose.prod.yml up -d

            # Wait for database to be ready
            echo "‚è≥ Waiting for database to start..."
            sleep 10

            # Run database migrations
            echo "üìä Running database migrations..."
            docker-compose -f docker-compose.prod.yml exec -T app pnpm run migration:run || echo "‚ö†Ô∏è  No migrations to run or migration failed"

            # Wait for app to fully start
            echo "‚è≥ Waiting for application to start..."
            sleep 5

            # Health check
            echo "üè• Running health check..."
            MAX_RETRIES=30
            RETRY_COUNT=0

            # Get APP_EXTERNAL_PORT from .env (default 58080)
            APP_PORT=$(grep APP_EXTERNAL_PORT .env | cut -d '=' -f2 || echo "58080")

            while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
              if curl -f -s -o /dev/null http://localhost:$APP_PORT/api; then
                echo "‚úÖ Application is healthy!"
                break
              fi
              RETRY_COUNT=$((RETRY_COUNT + 1))
              echo "   Attempt $RETRY_COUNT/$MAX_RETRIES - waiting..."
              sleep 2
            done

            if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
              echo "‚ùå Health check failed!"
              docker-compose -f docker-compose.prod.yml logs --tail=50 app
              exit 1
            fi

            echo "üéâ Deployment completed successfully!"

            # Show running containers
            docker-compose -f docker-compose.prod.yml ps

